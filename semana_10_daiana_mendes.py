# -*- coding: utf-8 -*-
"""Semana 10 - Daiana Mendes

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NlQI9smksvSoVREWYmJ-4B__4cRhICgH
"""

!pip install plotly --upgrade

import pandas as pd

import numpy as np

import seaborn as sns

import matplotlib.pyplot as plt

import plotly.express as px

base_credit = pd.read_csv('/content/credit_data.csv')

base_credit

base_credit.head()

base_credit.head(10)

base_credit.tail()

base_credit.tail(7)

base_credit.describe()

base_credit[base_credit['income'] >= 69995.685578]

base_credit[base_credit['loan'] <= 1.377630]

np.unique(base_credit['default'])

np.unique(base_credit['default'], return_counts=True)

sns.countplot(x = base_credit['default']);

plt.hist(x=base_credit['age'])

plt.hist(x=base_credit['income']);

plt.hist(x=base_credit['loan']);

grafico = px.scatter_matrix(base_credit,dimensions=['age', 'income', 'loan'], color='default')

grafico.show()

base_credit.loc[base_credit['age']<0]

base_credit2 = base_credit.drop('age', axis=1)

base_credit2

base_credit3 = base_credit.drop(base_credit[base_credit['age']<0].index)

base_credit3

base_credit.mean()

base_credit['age'].mean()

base_credit['age'][base_credit['age']>0].mean()

base_credit['age'][base_credit['age']>0].mean()

base_credit.loc[base_credit['age']<0, 'age'] =40.42

base_credit.head(27)

base_credit.isnull().sum()

base_credit.loc[pd.isnull(base_credit['age'])]

base_credit['age'].fillna(base_credit['age'].mean(), inplace =True)

base_credit.loc[base_credit['clientid'].isin([29,31,32])]

x_credit = base_credit.iloc[:,1:4].values

x_credit

y_credit = base_credit.iloc[:, 4].values

y_credit

x_credit[:,0].min(), x_credit[:,1].min(), x_credit[:,2].min()

x_credit[:,0].max(), x_credit[:,1].max(), x_credit[:,2].max()

from sklearn.preprocessing import StandardScaler

scaler_credit = StandardScaler()

x_credit = scaler_credit.fit_transform(x_credit)

x_credit[:,0].min(), x_credit[:,1].min(), x_credit[:,2].min()

x_credit[:,0].max(), x_credit[:,1].max(), x_credit[:,2].max()

from sklearn.model_selection import train_test_split

x_credit_treinamento, x_credit_teste, y_credit_treinamento, y_credit_teste = train_test_split(x_credit, y_credit, test_size=0.25, random_state=0)

x_credit_treinamento.shape

y_credit_treinamento.shape

x_credit_teste.shape, y_credit_teste.shape

import pickle

with open('credit.pkl', mode = 'wb' ) as f:


 pickle.dump([x_credit_treinamento, y_credit_treinamento, x_credit_teste, y_credit_teste],f)

from sklearn.naive_bayes import GaussianNB

import pickle

with open('/content/credit.pkl', 'rb') as f:
  x_credit_treinamento, y_credit_treinamento, x_credit_teste, y_credi_teste = pickle.load(f)

x_credit_treinamento.shape, y_credit_treinamento.shape

x_credit_teste.shape, y_credit_teste.shape

naive_credit_data = GaussianNB()

naive_credit_data.fit(x_credit_treinamento, y_credit_treinamento)

previsoes = naive_credit_data.predict(x_credit_teste)

previsoes

y_credit_teste

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

accuracy_score(y_credit_teste, previsoes)

confusion_matrix(y_credit_teste, previsoes)

from yellowbrick.classifier import ConfusionMatrix

cm = ConfusionMatrix(naive_credit_data)
cm.fit(x_credit_treinamento, y_credit_treinamento)
cm.score(x_credit_teste, y_credit_teste)

print(classification_report(y_credit_teste, previsoes))